#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# plot-json -- Plot a workload schedule
#
# It generate a set of workloads defining its characteristics and arrival time.
# The arrival time between each job is given by a Poisson process, then an exponential distribution.
# The workload type is generated by using two Poisson distribution, where the shape of the distribution
# can define which job type will be more frequently. It will define the application type and its
# configuration, such as if the job is Caffe, it will also define the batch size, and if the job is lamps,
# it will define the number of MPI processes.
#
# Copyright Â© 2017 Marcelo Amaral <marcelo.amaral@bsc.es>

import os
import json
import random
import pandas as pd
import seaborn as sns
import scipy.stats as stats
import matplotlib.pyplot as plt


def gen_jobs(folder, seed=12, num_jobs=10000, lamb_job=10, lamb_work=1):
    random.seed(seed)

    job_arrival = stats.poisson.rvs(size=num_jobs,  # Generate Poisson data
                                        mu=lamb_job)  # Average arrival time 10

    batch_size_dst = stats.binom.rvs(n=3,  # Five batch sizes
                                      p=0.1,  # Probability of the big number
                                      size=num_jobs)  # Number of trials

    num_gpus_dst = stats.binom.rvs(n=2,  # Number of GPUs
                                      p=0.39,  # Probability of the big number
                                      size=num_jobs)  # Number of trials

    jobs_type_dst = stats.binom.rvs(n=1,  # Alexnet or Googlenet
                                      p=0.2,  # Probability of the big number
                                      size=num_jobs)  # Number of trials

    jobs = dict()
    time = 0

    for j in range(0, num_jobs):
        jobs[j] = dict()
        jobs[j]['id'] = j

        if num_gpus_dst[j] == 0:
            num_gpus = 1
        elif num_gpus_dst[j] == 1:
            num_gpus = 2
        else:
            num_gpus = 3

        jobs[j]['minimal_utility'] = random.uniform(0.30, 0.52)

        # TODO: the memory set is not the real memory, it is the gpu memory. I need to fix it. Set also the gpu mem.
        # if app_type_rand <= 10:
        jobs[j]['gpus'] = num_gpus

        if jobs_type_dst[j] == 0:
            jobs[j]['type'] = "bvlc_alexnet"
        elif jobs_type_dst[j] == 1:
            jobs[j]['type'] = "bvlc_googlenet"
        else:
            jobs[j]['type'] = "caffenet"

        if batch_size_dst[j] == 0:
            jobs[j]['size'] = "1"  # Neural network batch size tiny
            jobs[j]['mem'] = 1
        elif batch_size_dst[j] == 1:
            jobs[j]['size'] = "4"  # Neural network batch size small
            jobs[j]['mem'] = 2
        elif batch_size_dst[j] == 3:
            jobs[j]['size'] = "64"  # Neural network batch size medium
            jobs[j]['mem'] = 8
        else:
            jobs[j]['size'] = "128"  # Neural network batch size big
            jobs[j]['mem'] = 12

        jobs[j]['tasks'] = 1
        jobs[j]['time'] = 0  # The real execution time will be defined by the system based on the placement
        jobs[j]['color'] = "#00" + "%04x" % random.randint(0, 0xFFFF)

        time += job_arrival[j]
        jobs[j]['arrival'] = time

    # pprint.pprint(jobs)

    with open(folder + "workloads-" + str(num_jobs) + ".json", "w+") as out:
        json.dump(jobs, out, sort_keys=True, indent=2, separators=(',', ':'))

    return jobs


if __name__ == "__main__":
    dir = "../../data/"
    gen_jobs(dir)


    # uniform_data = stats.uniform.rvs(size=100000,  # Generate 100000 numbers
    #                                  loc=0,  # From 0
    #                                  scale=10)  # To 10
    # data = stats.poisson.rvs(size=10000,  # Generate Poisson data
    #                   mu=1)
    #
    # # pd.DataFrame(data).plot(kind="density",  # Plot the distribution
    # #                                 figsize=(9, 9),
    # #                                 xlim=(-1, 11))
    #
    # pd.DataFrame(data).hist(range=(-0.5, max(data) + 0.5)
    #                                    , bins=max(data) + 1)
    #
    # arrival_rate_10 = stats.poisson.rvs(size=10000,  # Generate Poisson data
    #                   mu=10)
    #
    # # Print table of counts
    # # print(pd.crosstab(index="counts", columns=arrival_rate_10))
    #
    # # Plot histogram
    # pd.DataFrame(arrival_rate_10).hist(range=(-0.5, max(arrival_rate_10) + 0.5)
    #                                    , bins=max(arrival_rate_10) + 1)



    # plt.show()
